/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.balmukanov.argonathinterface.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-21")
public class RegisterUser implements org.apache.thrift.TBase<RegisterUser, RegisterUser._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterUser> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterUser");

  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("enabled", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField ACCOUNT_LOCKED_FIELD_DESC = new org.apache.thrift.protocol.TField("accountLocked", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField ACCOUNT_EXPIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("accountExpired", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField CREDENTIALS_EXPIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("credentialsExpired", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RegisterUserStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RegisterUserTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String username; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String phone; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String email; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String password; // required
  public boolean enabled; // required
  public boolean accountLocked; // required
  public boolean accountExpired; // required
  public boolean credentialsExpired; // required
  /**
   * 
   * @see Channel
   */
  public @org.apache.thrift.annotation.Nullable Channel channel; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USERNAME((short)1, "username"),
    PHONE((short)2, "phone"),
    EMAIL((short)3, "email"),
    PASSWORD((short)4, "password"),
    ENABLED((short)5, "enabled"),
    ACCOUNT_LOCKED((short)6, "accountLocked"),
    ACCOUNT_EXPIRED((short)7, "accountExpired"),
    CREDENTIALS_EXPIRED((short)8, "credentialsExpired"),
    /**
     * 
     * @see Channel
     */
    CHANNEL((short)9, "channel");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USERNAME
          return USERNAME;
        case 2: // PHONE
          return PHONE;
        case 3: // EMAIL
          return EMAIL;
        case 4: // PASSWORD
          return PASSWORD;
        case 5: // ENABLED
          return ENABLED;
        case 6: // ACCOUNT_LOCKED
          return ACCOUNT_LOCKED;
        case 7: // ACCOUNT_EXPIRED
          return ACCOUNT_EXPIRED;
        case 8: // CREDENTIALS_EXPIRED
          return CREDENTIALS_EXPIRED;
        case 9: // CHANNEL
          return CHANNEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLED_ISSET_ID = 0;
  private static final int __ACCOUNTLOCKED_ISSET_ID = 1;
  private static final int __ACCOUNTEXPIRED_ISSET_ID = 2;
  private static final int __CREDENTIALSEXPIRED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EMAIL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLED, new org.apache.thrift.meta_data.FieldMetaData("enabled", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ACCOUNT_LOCKED, new org.apache.thrift.meta_data.FieldMetaData("accountLocked", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ACCOUNT_EXPIRED, new org.apache.thrift.meta_data.FieldMetaData("accountExpired", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CREDENTIALS_EXPIRED, new org.apache.thrift.meta_data.FieldMetaData("credentialsExpired", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Channel.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterUser.class, metaDataMap);
  }

  public RegisterUser() {
  }

  public RegisterUser(
    java.lang.String username,
    java.lang.String phone,
    java.lang.String password,
    boolean enabled,
    boolean accountLocked,
    boolean accountExpired,
    boolean credentialsExpired,
    Channel channel)
  {
    this();
    this.username = username;
    this.phone = phone;
    this.password = password;
    this.enabled = enabled;
    setEnabledIsSet(true);
    this.accountLocked = accountLocked;
    setAccountLockedIsSet(true);
    this.accountExpired = accountExpired;
    setAccountExpiredIsSet(true);
    this.credentialsExpired = credentialsExpired;
    setCredentialsExpiredIsSet(true);
    this.channel = channel;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegisterUser(RegisterUser other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.enabled = other.enabled;
    this.accountLocked = other.accountLocked;
    this.accountExpired = other.accountExpired;
    this.credentialsExpired = other.credentialsExpired;
    if (other.isSetChannel()) {
      this.channel = other.channel;
    }
  }

  public RegisterUser deepCopy() {
    return new RegisterUser(this);
  }

  @Override
  public void clear() {
    this.username = null;
    this.phone = null;
    this.email = null;
    this.password = null;
    setEnabledIsSet(false);
    this.enabled = false;
    setAccountLockedIsSet(false);
    this.accountLocked = false;
    setAccountExpiredIsSet(false);
    this.accountExpired = false;
    setCredentialsExpiredIsSet(false);
    this.credentialsExpired = false;
    this.channel = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsername() {
    return this.username;
  }

  public RegisterUser setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPhone() {
    return this.phone;
  }

  public RegisterUser setPhone(@org.apache.thrift.annotation.Nullable java.lang.String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEmail() {
    return this.email;
  }

  public RegisterUser setEmail(@org.apache.thrift.annotation.Nullable java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPassword() {
    return this.password;
  }

  public RegisterUser setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public boolean isEnabled() {
    return this.enabled;
  }

  public RegisterUser setEnabled(boolean enabled) {
    this.enabled = enabled;
    setEnabledIsSet(true);
    return this;
  }

  public void unsetEnabled() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  /** Returns true if field enabled is set (has been assigned a value) and false otherwise */
  public boolean isSetEnabled() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  public void setEnabledIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLED_ISSET_ID, value);
  }

  public boolean isAccountLocked() {
    return this.accountLocked;
  }

  public RegisterUser setAccountLocked(boolean accountLocked) {
    this.accountLocked = accountLocked;
    setAccountLockedIsSet(true);
    return this;
  }

  public void unsetAccountLocked() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTLOCKED_ISSET_ID);
  }

  /** Returns true if field accountLocked is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountLocked() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTLOCKED_ISSET_ID);
  }

  public void setAccountLockedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTLOCKED_ISSET_ID, value);
  }

  public boolean isAccountExpired() {
    return this.accountExpired;
  }

  public RegisterUser setAccountExpired(boolean accountExpired) {
    this.accountExpired = accountExpired;
    setAccountExpiredIsSet(true);
    return this;
  }

  public void unsetAccountExpired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTEXPIRED_ISSET_ID);
  }

  /** Returns true if field accountExpired is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountExpired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTEXPIRED_ISSET_ID);
  }

  public void setAccountExpiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTEXPIRED_ISSET_ID, value);
  }

  public boolean isCredentialsExpired() {
    return this.credentialsExpired;
  }

  public RegisterUser setCredentialsExpired(boolean credentialsExpired) {
    this.credentialsExpired = credentialsExpired;
    setCredentialsExpiredIsSet(true);
    return this;
  }

  public void unsetCredentialsExpired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREDENTIALSEXPIRED_ISSET_ID);
  }

  /** Returns true if field credentialsExpired is set (has been assigned a value) and false otherwise */
  public boolean isSetCredentialsExpired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREDENTIALSEXPIRED_ISSET_ID);
  }

  public void setCredentialsExpiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREDENTIALSEXPIRED_ISSET_ID, value);
  }

  /**
   * 
   * @see Channel
   */
  @org.apache.thrift.annotation.Nullable
  public Channel getChannel() {
    return this.channel;
  }

  /**
   * 
   * @see Channel
   */
  public RegisterUser setChannel(@org.apache.thrift.annotation.Nullable Channel channel) {
    this.channel = channel;
    return this;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((java.lang.String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case ENABLED:
      if (value == null) {
        unsetEnabled();
      } else {
        setEnabled((java.lang.Boolean)value);
      }
      break;

    case ACCOUNT_LOCKED:
      if (value == null) {
        unsetAccountLocked();
      } else {
        setAccountLocked((java.lang.Boolean)value);
      }
      break;

    case ACCOUNT_EXPIRED:
      if (value == null) {
        unsetAccountExpired();
      } else {
        setAccountExpired((java.lang.Boolean)value);
      }
      break;

    case CREDENTIALS_EXPIRED:
      if (value == null) {
        unsetCredentialsExpired();
      } else {
        setCredentialsExpired((java.lang.Boolean)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((Channel)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USERNAME:
      return getUsername();

    case PHONE:
      return getPhone();

    case EMAIL:
      return getEmail();

    case PASSWORD:
      return getPassword();

    case ENABLED:
      return isEnabled();

    case ACCOUNT_LOCKED:
      return isAccountLocked();

    case ACCOUNT_EXPIRED:
      return isAccountExpired();

    case CREDENTIALS_EXPIRED:
      return isCredentialsExpired();

    case CHANNEL:
      return getChannel();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USERNAME:
      return isSetUsername();
    case PHONE:
      return isSetPhone();
    case EMAIL:
      return isSetEmail();
    case PASSWORD:
      return isSetPassword();
    case ENABLED:
      return isSetEnabled();
    case ACCOUNT_LOCKED:
      return isSetAccountLocked();
    case ACCOUNT_EXPIRED:
      return isSetAccountExpired();
    case CREDENTIALS_EXPIRED:
      return isSetCredentialsExpired();
    case CHANNEL:
      return isSetChannel();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RegisterUser)
      return this.equals((RegisterUser)that);
    return false;
  }

  public boolean equals(RegisterUser that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_enabled = true;
    boolean that_present_enabled = true;
    if (this_present_enabled || that_present_enabled) {
      if (!(this_present_enabled && that_present_enabled))
        return false;
      if (this.enabled != that.enabled)
        return false;
    }

    boolean this_present_accountLocked = true;
    boolean that_present_accountLocked = true;
    if (this_present_accountLocked || that_present_accountLocked) {
      if (!(this_present_accountLocked && that_present_accountLocked))
        return false;
      if (this.accountLocked != that.accountLocked)
        return false;
    }

    boolean this_present_accountExpired = true;
    boolean that_present_accountExpired = true;
    if (this_present_accountExpired || that_present_accountExpired) {
      if (!(this_present_accountExpired && that_present_accountExpired))
        return false;
      if (this.accountExpired != that.accountExpired)
        return false;
    }

    boolean this_present_credentialsExpired = true;
    boolean that_present_credentialsExpired = true;
    if (this_present_credentialsExpired || that_present_credentialsExpired) {
      if (!(this_present_credentialsExpired && that_present_credentialsExpired))
        return false;
      if (this.credentialsExpired != that.credentialsExpired)
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetPhone()) ? 131071 : 524287);
    if (isSetPhone())
      hashCode = hashCode * 8191 + phone.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((enabled) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((accountLocked) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((accountExpired) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((credentialsExpired) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetChannel()) ? 131071 : 524287);
    if (isSetChannel())
      hashCode = hashCode * 8191 + channel.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(RegisterUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnabled()).compareTo(other.isSetEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enabled, other.enabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccountLocked()).compareTo(other.isSetAccountLocked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountLocked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountLocked, other.accountLocked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccountExpired()).compareTo(other.isSetAccountExpired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountExpired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountExpired, other.accountExpired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCredentialsExpired()).compareTo(other.isSetCredentialsExpired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredentialsExpired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credentialsExpired, other.credentialsExpired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RegisterUser(");
    boolean first = true;

    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enabled:");
    sb.append(this.enabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountLocked:");
    sb.append(this.accountLocked);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountExpired:");
    sb.append(this.accountExpired);
    first = false;
    if (!first) sb.append(", ");
    sb.append("credentialsExpired:");
    sb.append(this.credentialsExpired);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel:");
    if (this.channel == null) {
      sb.append("null");
    } else {
      sb.append(this.channel);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (username == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
    }
    if (phone == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phone' was not present! Struct: " + toString());
    }
    if (password == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'password' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'enabled' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'accountLocked' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'accountExpired' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'credentialsExpired' because it's a primitive and you chose the non-beans generator.
    if (channel == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'channel' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegisterUserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RegisterUserStandardScheme getScheme() {
      return new RegisterUserStandardScheme();
    }
  }

  private static class RegisterUserStandardScheme extends org.apache.thrift.scheme.StandardScheme<RegisterUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enabled = iprot.readBool();
              struct.setEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCOUNT_LOCKED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.accountLocked = iprot.readBool();
              struct.setAccountLockedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCOUNT_EXPIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.accountExpired = iprot.readBool();
              struct.setAccountExpiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREDENTIALS_EXPIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.credentialsExpired = iprot.readBool();
              struct.setCredentialsExpiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel = ru.balmukanov.argonathinterface.thrift.Channel.findByValue(iprot.readI32());
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetEnabled()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'enabled' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAccountLocked()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountLocked' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAccountExpired()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountExpired' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCredentialsExpired()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'credentialsExpired' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterUser struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENABLED_FIELD_DESC);
      oprot.writeBool(struct.enabled);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_LOCKED_FIELD_DESC);
      oprot.writeBool(struct.accountLocked);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_EXPIRED_FIELD_DESC);
      oprot.writeBool(struct.accountExpired);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDENTIALS_EXPIRED_FIELD_DESC);
      oprot.writeBool(struct.credentialsExpired);
      oprot.writeFieldEnd();
      if (struct.channel != null) {
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegisterUserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RegisterUserTupleScheme getScheme() {
      return new RegisterUserTupleScheme();
    }
  }

  private static class RegisterUserTupleScheme extends org.apache.thrift.scheme.TupleScheme<RegisterUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegisterUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.username);
      oprot.writeString(struct.phone);
      oprot.writeString(struct.password);
      oprot.writeBool(struct.enabled);
      oprot.writeBool(struct.accountLocked);
      oprot.writeBool(struct.accountExpired);
      oprot.writeBool(struct.credentialsExpired);
      oprot.writeI32(struct.channel.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEmail()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegisterUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.username = iprot.readString();
      struct.setUsernameIsSet(true);
      struct.phone = iprot.readString();
      struct.setPhoneIsSet(true);
      struct.password = iprot.readString();
      struct.setPasswordIsSet(true);
      struct.enabled = iprot.readBool();
      struct.setEnabledIsSet(true);
      struct.accountLocked = iprot.readBool();
      struct.setAccountLockedIsSet(true);
      struct.accountExpired = iprot.readBool();
      struct.setAccountExpiredIsSet(true);
      struct.credentialsExpired = iprot.readBool();
      struct.setCredentialsExpiredIsSet(true);
      struct.channel = ru.balmukanov.argonathinterface.thrift.Channel.findByValue(iprot.readI32());
      struct.setChannelIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

